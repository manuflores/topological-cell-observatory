const id=getElement("metadata-post").innerText;if(id){const s=getElement("metadata-instance").innerText,r=getElement("i18n--is-replies").innerHTML,a=getElement("i18n--is-reblogs").innerHTML,n=getElement("i18n--is-favourites").innerHTML,o=document.createElement("style");o.textContent=`
        #comments > * {width: var(--golden-ratio)}
        #comments noscript {margin: var(--medskip) 0}
        #discussion-starter {margin-bottom: var(--medskip)}
        #discussion-starter > footer {display: flex; align-items: center; justify-content: space-between}
        .mastodon-comment {margin: 1rem 0 1rem calc(var(--mul) * var(--indent)); border: 1pt solid #fff4; border-left: 2pt solid var(--ac); background: #80808008; padding: 1rem 1rem 1ex; box-shadow: 0 .5pt 1pt 0 var(--g18s); overflow: auto}
        .mastodon-comment .content {margin-left: 4rem; line-height: calc(var(--baselineStretch) * 1.272)}
        .mastodon-comment .par a {max-width: 100%; vertical-align: bottom; white-space: break-spaces}
        .mastodon-comment .attachments * {width: 100%; height: auto}
        .mastodon-comment > footer {margin-top: 1rem; margin-left: 3.5rem}
        .mastodon-comment > footer .stat {display: inline-flex; flex-shrink: 0; gap: 5pt}
        .stat a {display: inline-flex; align-items: center; padding: 2pt; color: var(--mid); gap: 2pt}
        .stat a::before {vertical-align: text-top}
        a.replies.active, a.reblogs.active {color: var(--ac)}
        a.favourites.active {color: var(--i3i)}
        .mastodon-comment .date {margin-left: auto; padding-left: 1rem; color: var(--mid); font-size: calc(10pt * var(--fontScale))}
        @media only screen and (max-width: 960px) {
            .mastodon-comment .content, .mastodon-comment > footer {margin-left: 0}
        }
    `,document.head.appendChild(o);function escapeHtml(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}let i=!1;const e=(e,t)=>{const n=e[`${t}_count`];return n>0?"active":""},t=(e,t)=>{const n=e[`${t}_count`];return n>0?n:""},c=e=>{let t=`@${e.acct}`;if(!e.acct.includes("@")){const n=new URL(e.url);t+=`@${n.hostname}`}return t},l=(e,t,n)=>{const s=e.filter(e=>e.in_reply_to_id===t).sort((e,t)=>e.created_at.localeCompare(t.created_at));s.forEach(t=>d(e,t,n))},d=(s,o,i)=>{o.account.display_name=escapeHtml(o.account.display_name),o.account.emojis.forEach(e=>{o.account.display_name=o.account.display_name.replace(`:${e.shortcode}:`,`<img src="${escapeHtml(e.static_url)}" alt="Emoji ${e.shortcode}" height="20" width="20" />`)});const d=e=>{const t={image:()=>`<a href="${e.url}" rel="nofollow"><img src="${e.preview_url}" alt="${e.description}" loading="lazy" /></a>`,video:()=>`<video controls><source src="${e.url}" type="${e.mime_type}"></video>`,gifv:()=>`<video autoplay loop muted playsinline><source src="${e.url}" type="${e.mime_type}"></video>`,audio:()=>`<audio controls><source src="${e.url}" type="${e.mime_type}"></audio>`,default:()=>`<a href="${e.url}" rel="nofollow">${e.type}</a>`};return(t[e.type]||t.default)()},u=`
            <article class="mastodon-comment" style="--mul: ${i}">
                <header class="author">
                    <img src="${escapeHtml(o.account.avatar_static)}" height=48 width=48 alt="${c(o.account)}" loading="lazy"/>
                    <a class="has-aria-label" href="${o.account.url}" rel="nofollow" title="${o.account.display_name}" aria-label="${c(o.account)}">
                        <span>${o.account.display_name}</span>
                    </a>
                </header>
                <div class="content">
                    <div class="par" data-bionRead-safe>${o.content}</div>
                    <div class="attachments">
                        ${o.media_attachments.map(d).join("")}
                    </div>
                </div>
                <footer>
                    <div class="stat">
                        <a class="replies ${e(o,"replies")}" href="${o.url}" rel="nofollow" aria-label="${r}">
                            ${t(o,"replies")}
                        </a>
                        <a class="reblogs ${e(o,"reblogs")}" href="${o.url}" rel="nofollow" aria-label="${a}">
                            ${t(o,"reblogs")}
                        </a>
                        <a class="favourites ${e(o,"favourites")}" href="${o.url}" rel="nofollow" aria-label="${n}">
                            ${t(o,"favourites")}
                        </a>
                    </div>
                    <a class="date" href="${o.url}" rel="nofollow">
                        <time>${o.created_at.substr(0,10)} ${o.created_at.substr(11,8)}</time>
                    </a>
                </footer>
            </article>`;getElement("mastodon-comments-list").appendChild(DOMPurify.sanitize(u,{RETURN_DOM_FRAGMENT:!0})),l(s,o.id,i+1)},u=s=>`
        <a class="replies ${e(s,"replies")}" href="${s.url}" rel="nofollow" aria-label="${r}">
            ${t(s,"replies")}
        </a>
        <a class="reblogs ${e(s,"reblogs")}" href="${s.url}" rel="nofollow" aria-label="${a}">
            ${t(s,"reblogs")}
        </a>
        <a class="favourites ${e(s,"favourites")}" href="${s.url}" rel="nofollow" aria-label="${n}">
            ${t(s,"favourites")}
        </a>`,h=async()=>{if(i)return;const e=getElement("mastodon-comments-list");e.innerHTML=getElement("i18n--is-loading").innerHTML;try{const[n,o]=await Promise.all([fetch(`https://${s}/api/v1/statuses/${id}`),fetch(`https://${s}/api/v1/statuses/${id}/context`)]),[a,t]=await Promise.all([n.json(),o.json()]);getElement("mastodon-stats").innerHTML=u(a),t.descendants?.length>0?(e.innerHTML="",l(t.descendants,id,0)):e.innerHTML=getElement("i18n--no-comment").innerHTML,i=!0,e.setAttribute("aria-busy","false")}catch(t){console.error("Error loading comments:",t),e.innerHTML="Error loading comments"}},m=(e,t)=>{const n=new IntersectionObserver(e=>{e.forEach(e=>{e.intersectionRatio>0&&t()})},{root:null});n.observe(e)},f=getElement("mastodon-comments-list");m(f,h)}